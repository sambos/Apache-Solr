SOLR_LOCATOR : {
  # Name of solr collection
  collection : eventscollection

  # ZooKeeper ensemble
  zkHost : "$ZK_HOST"
}

morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**", "org.apache.solr.**"]
    commands : [
      {
        readJson {outputClass : com.fasterxml.jackson.databind.JsonNode}
      }

      { extractJsonPaths {
          flatten : true
             paths : {
               id : /t_eventId
               sessionId : /t_sessionId
               start   : /t_start
               end     : /t_end
               url   : /t_url
               userId  : /t_userId
               clientIp : /t_clientIp
               child_events : "/childs[]"
               nodes_labels : "/nodes[]/label"
               nodes_userIds : "/nodes[]/userId"
               nodes_clientIps : "/nodes[]/clientIp"
             }
          }
      }
      
    {
        java {
            imports : """
            import java.util.*;
            import java.lang.*;
            import java.util.*;
            import com.fasterxml.jackson.databind.JsonNode;
            import org.kitesdk.morphline.base.Fields;
            import org.apache.commons.lang.StringUtils;
          """
    	code: """

                JsonNode rootNode = (JsonNode) record.getFirstValue(Fields.ATTACHMENT_BODY);
                JsonNode vNode = rootNode.get("g_nodes");
                JsonNode vEdge = rootNode.get("g_edges");

                String[] fields = {"nodes_labels","nodes_userIds","nodes_clientIps","nodes_serverIps","nodes_hosts"};

                for(String name: fields){
                 Set<String> set = new HashSet<String>(record.get(name));
                 record.removeAll(name);
                 for(String v :  set ){
                   if(!v.isEmpty())
                   record.put(name, v );
                 }
                }

                logger.debug("Processed output: {}", record);

                    return child.process(record); // pass record to next command in chain
              """
              }
	  }
		
	  { logDebug { format : "output record: {}", args : ["@{}"] } }   

      {
		convertTimestamp {
		  field : start
		  inputFormats : ["yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd'T'HH:mm:ss.SSS"]
		  inputTimezone : UTC
		  outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
		  outputTimezone : UTC
		}      
      }
      
      {
		convertTimestamp {
		  field : end
		  inputFormats : ["yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd'T'HH:mm:ss.SSS"]
		  inputTimezone : UTC
		  outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
		  outputTimezone : UTC
		}      
      }  

      { # Remove record fields that are unknown to Solr schema.xml.
        # Recall that Solr throws an exception on any attempt to load a document that
        # contains a field that isn't specified in schema.xml.
        sanitizeUnknownSolrFields {
          solrLocator : ${SOLR_LOCATOR} # Location from which to fetch Solr schema
        }
      }

      {
        loadSolr {
          solrLocator : ${SOLR_LOCATOR}
        }
      }
    ]
  }
]

